pipeline {
 
  
	agent any

	parameters {

		booleanParam(name: 'Release', defaultValue: false, description: 'Is this a Release Candidate?')
	}

	environment {

		RELEASE_VERSION = '1.1.0'
		
		INT_VERSION = 'R2'
	}

	stages {

		stage('Audit Tools') {

			steps {

				sh'''
				  
				  git version
				  java -version
				  mvn -version
				'''
			}
		}

                stage('Checkout code'){

			  steps{

			     script {

				def gitRepoUrl = 'https://github.com/yashp23dev/Jenkins_Upgradev3.git'

				checkout([$class: 'GitSCM',
					   branches: [[name: '*/master']],
					   userRemoteConfigs: [[url: gitRepoUrl]],
					   extensions: [[$class: 'CleanBeforeCheckout'],[$class: 'CloneOption', noTags: false, shallow: true, depth: 1]]
					])
			     }
			  }
		}

		stage('unit Test') {

			steps {


				dir('./java-tomcat-sample') {

					sh '''
					   echo "Executing unit test..."
					   mvn test
					'''
				}
			}
		}

		stage('Build'){


			environment {

				VERSION_SUFFIX = "${sh(script: 'if [ "${RELEASE}" = false ] ; then echo -n "${INT_VERSION}"ci:"${BUILD_NUMBER}"; else echo -n "${RELEASE_VERSION}":"${BUILD_NUMBER}"; fi', returnStdout: true)}"

			}

			steps {

				echo "Building version: ${INT_VERSION} with suffix: ${VERSION_SUFFIX}"
				echo 'Mention your Application Build Code here!!!'
				dir('./java-tomat-sample') {


					sh '''
					   mvn versions:set -DnewVersion="${VERSION_SUFFIX}"-SNAPSHOT
					   mvn versions:update-child-modules
					   mvn clean package
					'''
				}
			}
		}

		stage('Publish') {


			when {

				expression { return param.RELEASE}
			}

			steps {

				archieveArtifacts('**/*.war')
			}
		}
	}

	post {

		always {

			cleanWs()
		}
	}
}
